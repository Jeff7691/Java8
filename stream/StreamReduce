package com.learnJava.stream;

import com.learnJava.data.Student;
import com.learnJava.data.StudentDataBase;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class StreamReduceExample {
    public static int performMultiplication(List<Integer> integerList){
        return integerList.stream()
                //1 1 * 1 = 1
                //3 1 * 3 = 3
                //5 3 * 5 = 15
                //7 15 * 7 = 105
                .reduce(1,(a,b) -> a * b);
    }

    //Optional use to handle null value
    public static Optional<Integer> performanceMultiplicationWithoutIdentity(List<Integer> integerList){
        return integerList.stream()
                .reduce((a,b) -> a * b);
    }

    /*
    //get the highest GPA
    public static Optional<Student> getHighestGPA(){
        return StudentDataBase.getAllStudent().stream()
                .reduce((s1,s2) ->{
                    if(s1.getGap() > s2.getGap()){
                        return s1;
                    }else {
                        return s2;
                    }
                });
    }
     */

    //more readable version.
    public static Optional<Student> getHighestGPA(){
        return StudentDataBase.getAllStudent().stream()
                .reduce((s1, s2) -> s1.getGap() > s2.getGap() ? s1 : s2);
    }

    public static void main(String[] args) {
      List<Integer> integers = Arrays.asList(1,3,5,7);
      List<Integer> integers1 = new ArrayList<>();

        System.out.println(performMultiplication(integers));

        Optional<Integer> result = performanceMultiplicationWithoutIdentity(integers);
        System.out.println(result.isPresent());
        System.out.println(result.get());

        Optional<Integer> result1 = performanceMultiplicationWithoutIdentity(integers1);
        System.out.println(result1.isPresent());
        //NoSuchElementException: No value present
        //System.out.println(result1.get());
        if(result1.isPresent()){
            System.out.println(result1.get());
        }
        //get the highest GPA
        Optional<Student> studentOptional = getHighestGPA();
        if(studentOptional.isPresent()){
            System.out.println(studentOptional.get());
        }
    }
}
